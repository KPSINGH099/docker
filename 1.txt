1.docker image ls 

to delete docker image
2. docker image rm <image id> or <container name> -f

to delete container
2. docker rm <container name> -f

3. docker build -t <image-name-u-want> .

4.port mapping krna padta h 

5 docker run -d -p 3000:3000 --name <name of conrainer u want > <image name>
docker run -d -p 8000:3001 --name node-app base-image
             port-of-container:port_of_node_app

6. show all container 
docker ps -a

if ur docker file is wrong then ur container may go into exited state

7. container k andar ka maal dekhne k liye

docker exec -it <container-name> bash



docker exec -it node-app bash




exit 


then u exit from this container 


8. use bind mount
to sync everything


docker run -d -v ${pwd}:/app -p 8000:3001 --name node-app base-image



kyki ab bind mount ka use kr liya to agar koi v code change hua to 
fir se image build 
container run nhi krna hoga 
bar bar ye sabkuch sync kr lega






manlo apne index.js me 

hii !!!!!!!!!!

ko 

kya hall h se 


change diya ab hum endpoint ko acess krne ki kosis kr rhe h 



fir v hii !!!!!!!!!!!!!!! hi print hoga




lekin container k anadra krk dekhenge to 


const express= require("express");

const app=express();

const port=process.env.port || 3001;

app.get("/",(req,res)=>{
console.log('data send');
res.send("<h1>kya haal h ?</h1>");
console.log('data send');
})


app.listen(port,()=>{
    console.log(`running on ${port}`)



change to hua h 


bcz we need to restart our node application
this is default behaviour of it




-->par bind mount ki ek problem h ki ye node_modules wale folder ko v sync kr lega 

so agar node_module ko apne working directory se delete kr diya to container se v gayab ho jayega 

so iske liye v need to use ignore mount {{anonmous mount}} sab sync kro but ye wala folder jo /app directory me h usse sync mat kro


docker run -d -v ${pwd}:/app -v /app/node_modules -p 8000:3001 --name node-app base-image

---> bind mount ki ek aur problem h agar container k andar hum kuch v create krte h to wo local machine k anadar v create ho jayega

so hum apne bind mount ko read only kr denge
docker run -d -v ${pwd}:/app:ro -v /app/node_modules -p 8000:3001 --name node-app base-image






Note : bind mount ka use kewal development env me hota h 



9. to print log of container 

docker logs <container name>

docker logs node-app 





10. using env

in dockerfile

ENV port 3001
EXPOSE $port


-> --env port=4000

->docker run -d -v ${pwd}:/app -v /app/node_modules --env port=4000 -p 8000:4000 --name node-app base-image


in linux 
we can use command 
printenv

HOSTNAME=0c3e8b006ed2
YARN_VERSION=1.22.19
PWD=/app
HOME=/root
port=4000
TERM=xterm
SHLVL=1
PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
NODE_VERSION=16.20.2



so .env file se environment variables ko lene k liye use this flag
--env-file <full path to .env file>
--env-file ./.env

docker run -d -v ${pwd}:/app -v /app/node_modules --env-file ./.env -p 8000:4000 --name node-app base-image



11. docker volume ls




bcz of anounous volume which we are using while running our docker application it is goono preserve our volume


 to delete volume


docker volume rm 38af70cad0a2717751b3e02ebb636c1d83fb3725308d9abf5bdd605997ae2d71


delete all volume
docker volume prune


delete container and volume as well as

docker rm node-app -fv


12. docker compose

way of automating our task


1 create docker-compose.yaml file


we are goono built our image 
then start container from image 
alternative of this
docker run -d -v ${pwd}:/app -v /app/node_modules --env port=4000 -p 8000:4000 --name node-app base-image
written into yml file


version: "3"
services:
  node-app:
    build: .
    ports:
      - "8000:4000"
    volumes:
      - ./:/app
      - /app/node_modules
    environment:
      - port=4000


2.to run it in deatach mode
docker-compose up -d


3. for image name and container name it follows convention as

repositry_name-services-name{from yaml file}

4. 
to bring down service


docker-compose down 


to delete anonmous volume
docker-compose down -v

 5. 
docker compose will keep on reffering that stale image

docker-compose up -d --build


6. docker compose will simply do docker image ls 
if it got image with name repsoitry_name_service_name
it will simply start container from it so if you made any changes to project it may it reffering 
to stale image so we need to run 
docker-compose up -d --build

7. anything written in dockerfile can be overwritten into docker compose file

8. docker compose -f docker-compose.yaml -f docker-compose.dev.yaml up -d


9. docker compose -f docker-compose.yaml -f docker-compose.dev.yaml down -v


//note in dev we are using bind mount also app_env is development

10. for prod we may need to force rebuilt image
docker compose -f docker-compose.yaml -f docker-compose.prod.yaml up -d --build

11. we can imbedd bash script inside our docker file

12. we can pass arg in our dockerfile from compose files

13 . whatever is written in docker-compose file we can ovveride in docker-compose.de or .prod  yaml files

14 .     build: 
      context: .
      args: 
        App_Env: development
        

        context . is nothing but the location of dockerfile 
        using args we will pass it to dockerfile



//note development mode not woring fine need to check bash script 

#######################################################
adding new service in docker compose.yaml inside service section we can add
 mongo:
    image: mongo
    environment:
      - MONGO_INITDB_ROOT_USERNAME=kishan
      - MONGO_INITDB_ROOT_PASSWORD=kishan
      volumes:
      - mongo-db:/data/db

named volume we are using here

all the named volume also need to be declare in another section of docker compose yaml file 
as a list
so let say another instance of mongo can use it 


open mongo container in interactive way  
mongo -u "kishan" -p "kishan"

anonmous bind mount path on local machine to path on container



login to mongo container docker exec -it express-mongo-1 mongo -u "kishan" -p "kishan"


###############################
connection with another container 
docker automatically assigns ip adress to container

docker inspect  express-mongo-1


if we create more than one container it also creates network and containers within same 
network can talk to each other 

    "Networks": {
                "express_default": {
                    "IPAMConfig": null,
                    "Links": null,
                    "Aliases": [
                        "express-mongo-1",
                        "mongo",
                        "a8840dd5143e"
                    ],
                    "MacAddress": "02:42:ac:13:00:02",
                    "NetworkID": "4c56cd92f0a4a461188e56121e787c17d4a909e610beefe71431e8bab15b0b72",
                    "EndpointID": "d6f73770a5daab684f64c50588aa4a8112ae060f2a18bc74419a37b725c4c82a",
                    "Gateway": "172.19.0.1",
                    "IPAddress": "172.19.0.2",
                    "IPPrefixLen": 16,
                    "IPv6Gateway": "",
                    "GlobalIPv6Address": "",
                    "GlobalIPv6PrefixLen": 0,
                    "DriverOpts": null
                }}


here is network information for container 


#################################
docker network ls
bridge 
host 
comes with docker bundeled
it has dns as well as 
services can talk with each other using their names


node-docker-default is default network created


###############################################
note in dev mode we are using anonmous bind so if we are adding library need to perform 
image build other code changes will be automatically syncronised
#########################################################



13. https://www.youtube.com/watch?v=XuSQU5Grv1g&t=3282s


https://www.youtube.com/watch?v=toLAU_QPF6o&t=14513s



https://www.youtube.com/watch?v=rBeyHDKLVqM&t=4041s



https://www.youtube.com/watch?v=JoHUi9KvnOA&t=12071s